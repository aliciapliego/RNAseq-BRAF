dds <- DESeq(dds)
res <- results(dds, contrast = c("Treatment", "Treated", "Untreated"))
resOrdered <- res[order(res$pvalue),]
summary(res)
resOrdered <- res[order(res$pvalue),]
summary(res)
resultsNames(dds)
rmarkdown::render_site()
?results
rmarkdown::render_site()
rmarkdown::render_site()
dds <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
#do filtering steps as for the clustering analysis
is_expressed <- assay(dds) >= 10
keep <- rowSums(assay(dds) >= 10) >= 2
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds, contrast = c("Treatment", "Treated", "Untreated"))
head(res)
dds <- DESeq(dds)
res <- results(dds)
head(res)
library("DESeq2")
library(tximport)
library(plotly)
library(pheatmap)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler)
library(AnnotationHub)
library(ensembldb)
library(tidyverse)
library(EnhancedVolcano)
library(ComplexHeatmap)
library(DT)
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v2/")
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v2/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v2.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
dds <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
#do filtering steps as for the clustering analysis
is_expressed <- assay(dds) >= 10
keep <- rowSums(assay(dds) >= 10) >= 2
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds, contrast = c("Treatment", "Treated", "Untreated"))
resOrdered <- res[order(res$pvalue),]
summary(res)
res05 <- results(dds, alpha=0.01, contrast = c("Treatment", "Treated", "Untreated"))
summary(res05)
res05 <- results(dds, alpha=0.001, contrast = c("Treatment", "Treated", "Untreated"))
summary(res05)
EnhancedVolcano(res05,
lab = rownames(res05),
title = 'Treated vs Untreated',
pCutoff = 10e-16,
FCcutoff = 1.5,
x = 'log2FoldChange',
y = 'pvalue')
# Further filter DE genes based on Padj = 0.001,  and FC>1.5(L2FC = 0.58)
res_filtered_pval <- subset(res05, padj <0.001)
res_filtered_all_up <- subset(res_filtered_pval, log2FoldChange >0.58)
res_filtered_all_up_df <- as.data.frame(res_filtered_all_up)
res_filtered_all_down <- subset(res_filtered_pval, log2FoldChange < -0.58)
res_filtered_all_down_df <- as.data.frame(res_filtered_all_down)
DT::datatable(res_filtered_all_down_df)
DT::datatable(res_filtered_all_up_df)
# Further filter DE genes based on Padj = 0.001,  and FC>1.5(L2FC = 0.58)
res_filtered_pval <- subset(res05, padj <0.0001)
res_filtered_all_up <- subset(res_filtered_pval, log2FoldChange >0.58)
res_filtered_all_up_df <- as.data.frame(res_filtered_all_up)
res_filtered_all_down <- subset(res_filtered_pval, log2FoldChange < -0.58)
res_filtered_all_down_df <- as.data.frame(res_filtered_all_down)
# Rank genes and export for GSEA analysis
x <- res_filtered_pval
x$fcsign <- sign(x$log2FoldChange )
x$logP=-log10(x$pvalue)
x$metric= x$logP/x$fcsign
x$Gene <- rownames(x)
y<-x[,c("Gene", "metric")]
filtered <- na.omit(y)
write.table(filtered ,file="DE_genes_pval_001.rnk",quote=F,sep="\t",row.names=F)
DT::datatable(res_filtered_all_down_df)
DT::datatable(res_filtered_all_up_df)
DT::datatable(res_filtered_all_down_df)
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v3/")
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v3/")
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v3/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
dds <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
#do filtering steps as for the clustering analysis
is_expressed <- assay(dds) >= 10
keep <- rowSums(assay(dds) >= 10) >= 2
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds, contrast = c("Treatment", "Treated", "Untreated"))
res
res05 <- results(dds, alpha=0.001, contrast = c("Treatment", "Treated", "Untreated"))
summary(res05)
EnhancedVolcano(res05,
lab = rownames(res05),
title = 'Treated vs Untreated',
pCutoff = 10e-16,
FCcutoff = 1.5,
x = 'log2FoldChange',
y = 'pvalue')
# Further filter DE genes based on Padj = 0.001,  and FC>1.5(L2FC = 0.58)
res_filtered_pval <- subset(res05, padj <0.001)
res_filtered_all_up <- subset(res_filtered_pval, log2FoldChange >0.58)
res_filtered_all_up_df <- as.data.frame(res_filtered_all_up)
res_filtered_all_down <- subset(res_filtered_pval, log2FoldChange < -0.58)
res_filtered_all_down_df <- as.data.frame(res_filtered_all_down)
# Rank genes and export for GSEA analysis
x <- res_filtered_pval
x$fcsign <- sign(x$log2FoldChange )
x$logP=-log10(x$pvalue)
x$metric= x$logP/x$fcsign
x$Gene <- rownames(x)
y<-x[,c("Gene", "metric")]
filtered <- na.omit(y)
write.table(filtered ,file="DE_genes_pval_001.rnk",quote=F,sep="\t",row.names=F)
View(filtered)
# we want the log2 fold change
original_gene_list = res$log2FoldChange
#original_gene_list<- as.data.frame(original_gene_list)
# name the vector
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gene <- names(gene_list)[abs(gene_list) > 2]
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "SYMBOL",
minGSSize = 10,
maxGSSize = 800,
pvalueCutoff = 0.01,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
dotplot(gse, showCategory = 10, font.size=14, split=".sign") + facet_grid(.~.sign)
# remove duplicate IDS (here we use "SYMBOL", but it should be whatever was selected as keyType)
dedup_ids = ids[!duplicated(ids[c("SYMBOL")]),]
# Create a new dataframe df2 which has the respective entrez IDs for the gene symbols.
colnames(dedup_ids) = c("GeneSymbol", "EntrezID")
res$GeneSymbol <- rownames(res)
res2 <- as.data.frame(res)
df2 = merge(res2, dedup_ids, by = "GeneSymbol")
# Create a vector of the gene universe
kegg_gene_list = df2$log2FoldChange
# Name vector with ENTREZ ids
names(kegg_gene_list) = df2$EntrezID
# omit any NA values
kegg_gene_list = na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
kegg_organism = "hsa"
kk2 = gseKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
kk3 = gseMKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05)
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids = bitr(names(original_gene_list), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
# remove duplicate IDS (here we use "SYMBOL", but it should be whatever was selected as keyType)
dedup_ids = ids[!duplicated(ids[c("SYMBOL")]),]
# Create a new dataframe df2 which has the respective entrez IDs for the gene symbols.
colnames(dedup_ids) = c("GeneSymbol", "EntrezID")
res$GeneSymbol <- rownames(res)
res2 <- as.data.frame(res)
df2 = merge(res2, dedup_ids, by = "GeneSymbol")
# Create a vector of the gene universe
kegg_gene_list = df2$log2FoldChange
# Name vector with ENTREZ ids
names(kegg_gene_list) = df2$EntrezID
# omit any NA values
kegg_gene_list = na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
kegg_organism = "hsa"
kk2 = gseKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
kk3 = gseMKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05)
out_kk3 = as.data.frame(kk2@result)
DT::datatable(out_kk3)
out = as.data.frame(kk2@result)
#out = out[, 1:30]
#head(out)
dotplot(kk2, showCategory = 15, title = "Enriched Pathways",font.size=14, split=".sign") + facet_grid(.~.sign)
dotplot(kk2, showCategory = 15, title = "Enriched Pathways",font.size=14, split=".sign") + facet_grid(.~.sign)
C6_t2g <- msigdbr(species = "Homo sapiens", category = "C6") %>%
dplyr::select(gs_name, entrez_gene)
#head(C6_t2g)
em2 <- GSEA(kegg_gene_list, TERM2GENE = C6_t2g)
out_em2 = as.data.frame(em2@result)
#head(em2)
# we want the log2 fold change
original_gene_list = res$log2FoldChange
#original_gene_list<- as.data.frame(original_gene_list)
# name the vector
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gene <- names(gene_list)[abs(gene_list) > 2]
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "SYMBOL",
minGSSize = 10,
maxGSSize = 800,
pvalueCutoff = 0.01,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library("DESeq2")
library(tximport)
library(plotly)
library(pheatmap)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler)
library(AnnotationHub)
library(ensembldb)
library(tidyverse)
library(EnhancedVolcano)
library(ComplexHeatmap)
library(DT)
# we want the log2 fold change
original_gene_list = res$log2FoldChange
#original_gene_list<- as.data.frame(original_gene_list)
# name the vector
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gene <- names(gene_list)[abs(gene_list) > 2]
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "SYMBOL",
minGSSize = 10,
maxGSSize = 800,
pvalueCutoff = 0.01,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
gene_list
dotplot(gse, showCategory = 10, font.size=14, split=".sign") + facet_grid(.~.sign)
# Convert gene IDs for gseKEGG function
# We will lose some genes here because not all IDs will be converted
ids = bitr(names(original_gene_list), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
# remove duplicate IDS (here we use "SYMBOL", but it should be whatever was selected as keyType)
dedup_ids = ids[!duplicated(ids[c("SYMBOL")]),]
# Create a new dataframe df2 which has the respective entrez IDs for the gene symbols.
colnames(dedup_ids) = c("GeneSymbol", "EntrezID")
res$GeneSymbol <- rownames(res)
res2 <- as.data.frame(res)
df2 = merge(res2, dedup_ids, by = "GeneSymbol")
# Create a vector of the gene universe
kegg_gene_list = df2$log2FoldChange
# Name vector with ENTREZ ids
names(kegg_gene_list) = df2$EntrezID
# omit any NA values
kegg_gene_list = na.omit(kegg_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE)
kegg_organism = "hsa"
kk2 = gseKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05,
pAdjustMethod = "none",
keyType       = "ncbi-geneid")
kk3 = gseMKEGG(geneList     = kegg_gene_list,
organism     = kegg_organism,
minGSSize    = 3,
maxGSSize    = 800,
pvalueCutoff = 0.05)
emapplot(kk2)
ridgeplot(kk2) + labs(x = "enrichment distribution")
ridgeplot(kk3) + labs(x = "enrichment distribution")
out_kk3 = as.data.frame(kk2@result)
DT::datatable(out_kk3)
dotplot(kk2, showCategory = 15, title = "Enriched Pathways",font.size=14, split=".sign") + facet_grid(.~.sign)
library(msigdbr)
m_df <- msigdbr(species = "Homo sapiens")
m_t2g <- msigdbr(species = "Homo sapiens", category = "C6") %>%
dplyr::select(gs_name, entrez_gene)
C6_t2g <- msigdbr(species = "Homo sapiens", category = "C6") %>%
dplyr::select(gs_name, entrez_gene)
#head(C6_t2g)
em2 <- GSEA(kegg_gene_list, TERM2GENE = C6_t2g)
out_em2 = as.data.frame(em2@result)
#head(em2)
dotplot(em2, showCategory = 15,title = "Enriched Pathways" ,font.size=14, split=".sign") + facet_grid(.~.sign)
gseaplot(em2, by = "all", title = em2$Description[1], geneSetID = 1)
C6_t2g <- msigdbr(species = "Homo sapiens", category = "C1") %>%
dplyr::select(gs_name, entrez_gene)
#head(C6_t2g)
em2 <- GSEA(kegg_gene_list, TERM2GENE = C6_t2g)
out_em2 = as.data.frame(em2@result)
#head(em2)
DT::datatable(out_em2)
dotplot(em2, showCategory = 15,title = "Enriched Pathways" ,font.size=14, split=".sign") + facet_grid(.~.sign)
C6_t2g <- msigdbr(species = "Homo sapiens", category = "C2") %>%
dplyr::select(gs_name, entrez_gene)
#head(C6_t2g)
em2 <- GSEA(kegg_gene_list, TERM2GENE = C6_t2g)
out_em2 = as.data.frame(em2@result)
#head(em2)
dotplot(em2, showCategory = 15,title = "Enriched Pathways" ,font.size=14, split=".sign") + facet_grid(.~.sign)
C6_t2g <- msigdbr(species = "Homo sapiens", category = "C3") %>%
dplyr::select(gs_name, entrez_gene)
#head(C6_t2g)
em2 <- GSEA(kegg_gene_list, TERM2GENE = C6_t2g)
out_em2 = as.data.frame(em2@result)
#head(em2)
dotplot(em2, showCategory = 15,title = "Enriched Pathways" ,font.size=14, split=".sign") + facet_grid(.~.sign)
em3 <- gseWP(kegg_gene_list, organism = "Homo sapiens")
dotplot(em3, title = "Enriched Pathways",font.size=14)
library(pathview)
kegg_organism <-  "Homo sapiens"
# Produce the native KEGG plot (PNG)
dme <- pathview(gene.data=kegg_gene_list, pathway.id="dme04130", species = kegg_organism)
# Produce a different plot (PDF) (not displayed here)
dme <- pathview(gene.data=kegg_gene_list, pathway.id="dme04130", species = kegg_organism, kegg.native = F)
library(pathview)
kegg_organism <-  "Hsa"
# Produce the native KEGG plot (PNG)
dme <- pathview(gene.data=kegg_gene_list, pathway.id="dme04130", species = kegg_organism)
# Produce a different plot (PDF) (not displayed here)
dme <- pathview(gene.data=kegg_gene_list, pathway.id="dme04130", species = kegg_organism, kegg.native = F)
original_gene_list <- res$log2FoldChange
original_gene_list
rownames(original_gene_list) <- rownames(res)
original_gene_list <- res$log2FoldChange
# name the vector
rownames(original_gene_list) <- rownames(res)
# name the vector
names(original_gene_list) <- rownames(res)
# omit any NA values
gene_list<-na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gene_list
clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
# Exctract significant results (padj < 0.05)
sig_genes_df = subset(res, padj < 0.05)
# From significant results, we want to filter on log2fold change
genes <- sig_genes_df$log2FoldChange
genes
sig_genes_df
# Name the vector
names(genes) <- sig_genes_df$GeneSymbol
# omit NA values
genes <- na.omit(genes)
# filter on min log2fold change (log2FoldChange > 2)
genes <- names(genes)[abs(genes) > 2]
genes
go_enrich <- enrichGO(gene = genes,
universe = names(gene_list),
OrgDb = organism,
keyType = 'SYMBOL',
readable = T,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10)
organism = "org.Hg.eg.db"
go_enrich <- enrichGO(gene = genes,
universe = names(gene_list),
OrgDb = organism,
keyType = 'SYMBOL',
readable = T,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10)
organism = "org.Hs.eg.db"
go_enrich <- enrichGO(gene = genes,
universe = names(gene_list),
OrgDb = organism,
keyType = 'SYMBOL',
readable = T,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10)
organism = "org.Hs.eg.db"
go_enrich <- enrichGO(gene = genes,
universe = names(gene_list),
OrgDb = organism,
keyType = 'SYMBOL',
readable = T,
ont = "BP",
verbose = TRUE,
pvalueCutoff = 0.05,
qvalueCutoff = 0.10)
genes
names(gene_list)
organism = "org.Hs.eg.db"
go_enrich <- enrichGO(gene = genes,
universe = names(gene_list),
OrgDb = organism,
keyType = 'SYMBOL',
readable = T,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10)
organism = "org.Hs.eg.db"
go_enrich <- enrichGO(gene = genes,
universe = names(gene_list),
OrgDb = organism,
keyType = 'SYMBOL',
readable = F,
ont = "BP",
pvalueCutoff = 0.05,
qvalueCutoff = 0.10)
#BiocManager::install("enrichplot")
library(enrichplot)
upsetplot(go_enrich)
#BiocManager::install("enrichplot")
library(enrichplot)
upsetplot(go_enrich)
#BiocManager::install("enrichplot")
BiocManager::install("enrichplot")
#BiocManager::install("enrichplot")
library(enrichplot)
upsetplot(go_enrich)
wcdf<-read.table(text=go_enrich$GeneRatio, sep = "/")[1]
wcdf$term<-go_enrich[,2]
wordcloud(words = wcdf$term, freq = wcdf$V1, scale=(c(4, .1)), colors=brewer.pal(8, "Dark2"), max.words = 25)
barplot(go_enrich,
drop = TRUE,
showCategory = 10,
title = "GO Biological Pathways",
font.size = 8)
dotplot(go_enrich)
res
length(res)
