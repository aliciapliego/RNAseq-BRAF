install.packages("rmarkdown", type = "source")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::all_output_formats()
rmarkdown::all_output_formats()
rmarkdown::render_site(RNA-BRAF)
rmarkdown::render_site(RNA-BRAF)
rmarkdown::render_site()
install.packages("install.packages("rmarkdown")")
install.packages("install.packages("rmarkdown")")
install.packages("install.packages("rmarkdown")")
rmarkdown::render_site()
rmarkdown::render_site()
knitr::include_graphics("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/report/RNAseq-BRAF/images/GSEA_plot.png")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
ui <- fluidPage(
h2("Downregulated genes in the Treated sample"),
DT::dataTableOutput("mytable")
)
server <- function(input, output) {
output$mytable = DT::renderDataTable({
res_filtered_all_down_df
})
}
shinyApp(ui, server, options = list(height = 500))
rmarkdown::render_site()
library(shiny)
library(DT)
library(diceR)
data(hgsc)
# Custom distance function
manh <- function(x) {
stats::dist(x, method = "manhattan")
}
# Custom clustering algorithm
agnes <- function(d, k) {
return(as.integer(stats::cutree(cluster::agnes(d, diss = TRUE), k)))
}
assign("agnes", agnes, 1)
ui <- fluidPage(
DT::dataTableOutput("tableDT"),
tableOutput("table")
)
server <- function(input, output){
data <- reactive({
dat <- hgsc[1:10, 1:50]
cc <- consensus_cluster(dat, reps = 6, algorithms = c("pam", "agnes"),
distance = c("euclidean", "manh"), progress = FALSE)
ce <- as.matrix(cc)
t(ce)
})
output$tableDT <- DT::renderDataTable({
data()
})
output$table <- renderTable({
data()
})
}
shinyApp(ui, server)
library(diceR)
install.packages("diceR")
library(diceR)
library(shiny)
library(DT)
library(diceR)
data(hgsc)
# Custom distance function
manh <- function(x) {
stats::dist(x, method = "manhattan")
}
# Custom clustering algorithm
agnes <- function(d, k) {
return(as.integer(stats::cutree(cluster::agnes(d, diss = TRUE), k)))
}
assign("agnes", agnes, 1)
ui <- fluidPage(
DT::dataTableOutput("tableDT"),
tableOutput("table")
)
server <- function(input, output){
data <- reactive({
dat <- hgsc[1:10, 1:50]
cc <- consensus_cluster(dat, reps = 6, algorithms = c("pam", "agnes"),
distance = c("euclidean", "manh"), progress = FALSE)
ce <- as.matrix(cc)
t(ce)
})
output$tableDT <- DT::renderDataTable({
data()
})
output$table <- renderTable({
data()
})
}
shinyApp(ui, server)
rmarkdown::render_site()
DT::datatable(iris)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
library(CINmetrics)
install.packages(CINmetrics)
install.packages("CINmetrics")
library(CINmetrics)
View(res05)
# Further filter DE genes based on Padj = 0.01,  and FC>1.5(L2FC = 0.58)
res_filtered_pval <- subset(res05, padj <0.01)
res_filtered_all_up <- subset(res_filtered_pval, log2FoldChange >0.58)
res_filtered_all_up_df <- as.data.frame(res_filtered_all_up)
res_filtered_all_down <- subset(res_filtered_pval, log2FoldChange < -0.58)
res_filtered_all_down_df <- as.data.frame(res_filtered_all_down)
View(res_filtered_all_up_df)
res05
resOrdered <- res[order(res$pvalue),]
summary(res)
res05 <- results(dds, alpha=0.05, contrast = c("Treatment", "Treated", "Untreated"))
summary(res05)
res05 <- results(dds, alpha=0.05, contrast = c("Treatment", "Treated", "Untreated"))
summary(res05)
EnhancedVolcano(res05,
lab = rownames(res05),
title = 'Treated vs Untreated',
pCutoff = 10e-16,
FCcutoff = 1.5,
x = 'log2FoldChange',
y = 'pvalue')
library("DESeq2")
library(tximport)
library(plotly)
library(pheatmap)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler)
library(AnnotationHub)
library(ensembldb)
library(tidyverse)
library(EnhancedVolcano)
library(ComplexHeatmap)
library(DT)
EnhancedVolcano(res05,
lab = rownames(res05),
title = 'Treated vs Untreated',
pCutoff = 10e-16,
FCcutoff = 1.5,
x = 'log2FoldChange',
y = 'pvalue')
res05_df <- as.data.frame(res05)
res05_df$log10P <- -log10(res05_df$pvalue)
library(plotly)
vline <- function(x = 0, color = "red") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
hline <- function(y = 0, color = "blue") {
list(
type = "line",
x0 = 0,
x1 = 1,
xref = "paper",
y0 = y,
y1 = y,
line = list(color = color)
)
}
fig <- plot_ly(data = res05_df, x = ~res05_df$log2FoldChange, y = ~res05_df$log10P,
text= rownames(res05_df), color = ~res05_df$log2FoldChange) %>%
layout(xaxis = list(title = 'log2FoldChange'), font=t, plot_bgcolor = "#e5ecf6",
yaxis = list(title = '-log10(Pval)'), legend = list(title=list(text='Legend Title')), shapes = list(vline(2.5), hline(20)))
fig
# Further filter DE genes based on Padj = 0.01,  and FC>1.5(L2FC = 0.58)
res_filtered_pval <- subset(res05, padj <0.01)
res_filtered_all_up <- subset(res_filtered_pval, log2FoldChange >0.58)
res_filtered_all_up_df <- as.data.frame(res_filtered_all_up)
res_filtered_all_down <- subset(res_filtered_pval, log2FoldChange < -0.58)
res_filtered_all_down_df <- as.data.frame(res_filtered_all_down)
View(res_filtered_all_up_df)
View(res_filtered_all_down_df)
View(res_filtered_all_up_df)
