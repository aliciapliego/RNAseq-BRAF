T_U_up_genes
res_df
T_U_up_genes<-subset(res, res$log2FoldChange>0&res$padj<=0.05)$symbol
T_U_up_genes
T_U_up_genes<-subset(res, res$log2FoldChange>0&res$padj<=0.05)$symbol
# Provide list of significant genes for over-representation analysis of GO gene sets
# using enrichGO():
GO_enrich<-enrichGO(gene=T_U_up_genes,
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
maxGSSize = 30)
par(mar=c(5,20,3,3))
barplot(rev(-log10(GO_T_U@result$p.adjust[1:10])),
horiz = T, names=rev(GO_T_U@result$Description[1:10]),
las=2, xlab="-log10(adj.p-value)",
cex.names = 0.7,
col="lightgreen")
abline(v=-log10(0.05))
par(mar=c(5,20,3,3))
barplot(rev(-log10(GO_T_U@result$p.adjust[1:10])),
horiz = T, names=rev(GO_T_U@result$Description[1:10]),
las=2, xlab="-log10(adj.p-value)",
cex.names = 0.7,
col="lightgreen")
abline(v=-log10(0.05))
# Use the GO_enrich analysis performed above, of the over-representation analysis
# of genes up-regulated in NK cells:
# Barplot on enrichResult object:
graphics::barplot(GO_enrich)
keytypes(org.Hs.eg.db)
# convert from= "ENSEMBL" to "SYMBOL" and "ENTREZID"
gene_convert <- bitr(as.character(res$symbol),
fromType="SYMBOL",
toType=c("SYMBOL", "ENTREZID"), OrgDb="org.Hs.eg.db")
# Check the format of the data frame obtained after conversion:
head(gene_convert)
dim(gene_convert)
# Create a vector of genes that are coded with the EntrezID:
# use the sorted gene list gl previously created:
gl_kegg<-cbind(SYMBOL=names(gl), t=gl)
# merge with converted gene symbols to combine both:
# by default the data frames are merged on the columns with names they both have
gl_kegg<-merge(gl_kegg, gene_convert)
head(gl_kegg)
gl_kegg_list<-as.numeric(as.character(gl_kegg$t))
names(gl_kegg_list)<-as.character(gl_kegg$ENTREZID)
gl_kegg_list<-sort(gl_kegg_list, decreasing = T)
# run GSEA of KEGG:
KEGG_NK_Th<-gseKEGG(gl_kegg_list, organism = "hsa", "ncbi-geneid",
minGSSize = 30,
eps=1e-50, # or try with eps=0
seed=T)
gl_kegg_list
KEGG_NK_Th
library(pathview)
# pathview map with non-significant genes in grey:
# set log fold change of non-significant genes to 0:
res$logFC_0<-ifelse(res$padj>0.05, 0, res$log2FoldChange)
# create named vector of fold change values:
genePW<-res$logFC_0
names(genePW)<-res$symbol
library(pathview)
# pathview map with non-significant genes in grey:
# set log fold change of non-significant genes to 0:
res$logFC_0<-ifelse(res$padj>0.05, 0, res$log2FoldChange)
# create named vector of fold change values:
genePW<-res$logFC_0
names(genePW)<-res$symbol
# create pathview map of Natural killer cell mediated cytotoxicity = hsa04650
pathview(gene.data  = genePW,
pathway.id = "hsa04010",
species    = "hsa",
gene.idtype = "SYMBOL")
# pathview map for Ribosome = hsa03010
pathview(gene.data  = genePW,
pathway.id = "hsa04330",
species    = "hsa",
gene.idtype = "SYMBOL")
pathview(gene.data  = genePW,
pathway.id = "hsa04115",
species    = "hsa",
gene.idtype = "SYMBOL")
pathview(gene.data  = genePW,
pathway.id = "hsa03008",
species    = "hsa",
gene.idtype = "SYMBOL")
pathview(gene.data  = genePW,
pathway.id = "hsa04110",
species    = "hsa",
gene.idtype = "SYMBOL")
library(pathview)
# pathview map with non-significant genes in grey:
# set log fold change of non-significant genes to 0:
res$logFC_0<-ifelse(res$padj>0.05, 0, res$log2FoldChange)
# create named vector of fold change values:
genePW<-res$logFC_0
names(genePW)<-res$symbol
# create pathview map of Natural killer cell mediated cytotoxicity = hsa04650
pathview(gene.data  = genePW,
pathway.id = "hsa04010",
species    = "hsa",
gene.idtype = "SYMBOL")
# pathview map for Ribosome = hsa03010
pathview(gene.data  = genePW,
pathway.id = "hsa04330",
species    = "hsa",
gene.idtype = "SYMBOL")
pathview(gene.data  = genePW,
pathway.id = "hsa04115",
species    = "hsa",
gene.idtype = "SYMBOL")
pathview(gene.data  = genePW,
pathway.id = "hsa03008",
species    = "hsa",
gene.idtype = "SYMBOL")
pathview(gene.data  = genePW,
pathway.id = "hsa04110",
species    = "hsa",
gene.idtype = "SYMBOL")
pathview(gene.data  = genePW,
pathway.id = "hsa04310",
species    = "hsa",
gene.idtype = "SYMBOL")
# Use the GO_enrich analysis performed above, of the over-representation analysis
# of genes up-regulated in NK cells:
# Barplot on enrichResult object:
graphics::barplot(GO_enrich)
term2gene_h<-read.gmt("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/h.all.v7.1.symbols.gmt")
term2gene_h<-read.gmt("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/h.all.v7.5.1.symbols.gmt")
# Import hallmark, convert to term2gene and run GSEA:
term2gene_h<-read.gmt("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/h.all.v7.5.1.symbols.gmt")
#head(term2gene_h)
#length(unique(term2gene_h$term))
# Run GSEA with the function that allows to use custom gene sets,
# provide the named vector of t statistics
h_T_U<-GSEA(gl, TERM2GENE = term2gene_h,
eps=1e-50, # or try eps=0
seed=T)
#View(h_T_U@result)
# Number of significant gene sets:
#length(which(h_T_U@result$p.adjust<=0.05))
dotplot(h_T_U)
dotplot(h_T_U, x="NES", orderBy="p.adjust")
View(h_T_U)
h_T_U@result[["Description"]]
# A dotplot with geneRatio or NES on the x-axis:
dotplot(h_T_U)
dotplot(h_T_U, x="NES", orderBy="p.adjust")
# A barcode plot:
gseaplot2(h_T_U, geneSetID = "HALLMARK_WNT_BETA_CATENIN_SIGNALING",
title="HALLMARK_WNT_BETA_CATENIN_SIGNALING")
gseaplot2(h_T_U, geneSetID = "HALLMARK_PI3K_AKT_MTOR_SIGNALING",
title="HALLMARK_PI3K_AKT_MTOR_SIGNALING")
h_T_U
as.data.frame(h_T_U)
# Number of significant gene sets:
length(which(h_T_U@result$p.adjust<=0.05))
h_T_U@result$p.adjust<=0.05)
h_T_U@result$p.adjust<=0.05
h_T_U(h_T_U@result$p.adjust<=0.05))
h_T_U(h_T_U@result$p.adjust<=0.05)
DT::datatable(h_T_U)
h_T_U_df <- as.data.frame(h_T_U)
DT::datatable(h_T_U_df)
```{r pressure, echo=FALSE, out.width = '100%'}
knitr::include_graphics("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/report/RNAseq-BRAF/images/oncoprint_BRAF_organoids_sabrina_140422.pdf")
```
```{r pressure, echo=FALSE, out.width = '100%'}
knitr::include_graphics("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/report/RNAseq-BRAF/images/oncoprint_BRAF_organoids_sabrina_140422.pdf")
```
```{r pressure, echo=FALSE, out.width = '100%'}
knitr::include_graphics("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/report/RNAseq-BRAF/images/oncoprint_BRAF_organoids_sabrina_140422.pdf")
```
```{r pressure, echo=FALSE, out.width = '100%'}
knitr::include_graphics("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/report/RNAseq-BRAF/images/oncoprint_BRAF_organoids_sabrina_140422.pdf")
```
```{r pressure, echo=FALSE, out.width = '100%'}
knitr::include_graphics("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/report/RNAseq-BRAF/images/oncoprint_BRAF_organoids_sabrina_140422.pdf")
```
T_U_up_genes<-subset(res, res$log2FoldChange>0&res$padj<=0.05)$symbol
# Provide list of significant genes for over-representation analysis of GO gene sets
# using enrichGO():
GO_enrich<-enrichGO(gene=T_U_up_genes,
OrgDb = org.Hs.eg.db,
keyType = "SYMBOL",
maxGSSize = 30)
keytypes(org.Hs.eg.db)
# convert from= "ENSEMBL" to "SYMBOL" and "ENTREZID"
gene_convert <- bitr(as.character(res$symbol),
fromType="SYMBOL",
toType=c("SYMBOL", "ENTREZID"), OrgDb="org.Hs.eg.db")
# Create a vector of genes that are coded with the EntrezID:
# use the sorted gene list gl previously created:
gl_kegg<-cbind(SYMBOL=names(gl), t=gl)
# merge with converted gene symbols to combine both:
# by default the data frames are merged on the columns with names they both have
gl_kegg<-merge(gl_kegg, gene_convert)
#head(gl_kegg)
gl_kegg_list<-as.numeric(as.character(gl_kegg$t))
#names(gl_kegg_list)<-as.character(gl_kegg$ENTREZID)
gl_kegg_list<-sort(gl_kegg_list, decreasing = T)
# run GSEA of KEGG:
KEGG_NK_Th<-gseKEGG(gl_kegg_list, organism = "hsa", "ncbi-geneid",
minGSSize = 30,
eps=1e-50, # or try with eps=0
seed=T)
gl_kegg_list
gl_kegg_list
gl_kegg
gl_kegg_list
gseKEGG(gl_kegg_list, organism = "hsa", "ncbi-geneid",
minGSSize = 30,
eps=1e-50, # or try with eps=0
seed=T)
rmarkdown::render_site()
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v2/")
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v4/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
dds <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
#do filtering steps as for the clustering analysis
is_expressed <- assay(dds) >= 10
keep <- rowSums(assay(dds) >= 10) >= 2
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds, contrast = c("Treatment", "Treated", "Untreated"))
resOrdered <- res[order(res$pvalue),]
summary(res)
rmarkdown::render_site()
library("DESeq2")
library(tximport)
library(plotly)
library(pheatmap)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler)
library(AnnotationHub)
library(ensembldb)
library(tidyverse)
library(EnhancedVolcano)
library(ComplexHeatmap)
library(DT)
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v2/")
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v4/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
dds <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
#do filtering steps as for the clustering analysis
is_expressed <- assay(dds) >= 10
keep <- rowSums(assay(dds) >= 10) >= 2
dds <- dds[keep,]
dds <- DESeq(dds)
res <- results(dds, contrast = c("Treatment", "Treated", "Untreated"))
rmarkdown::render_site()
res <- results(dds)
res
metadata
dds
rownames(dds)
resultsNames(dds)
dds <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
dds <- DESeq(dds)
resultsNames(dds)
rmarkdown::render_site()
resultsNames(dds_2)
rmarkdown::render_site()
dds_2 <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- Treatment)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
metadata
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
dds_2 <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
dds_2 <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v4/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
rmarkdown::render_site()
resultsNames(dds_2)
resultsNames(dds)
resultsNames(dds)
rmarkdown::render_site()
metadata2 = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata2)),
align = c('left', rep('center', ncol(metadata2))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata2),
t(as.matrix(unname(metadata2)))
),
align = c('left', rep('center', ncol(metadata2))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
metadata2 = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples_v4.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata2)),
align = c('left', rep('center', ncol(metadata2))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata2),
t(as.matrix(unname(metadata2)))
),
align = c('left', rep('center', ncol(metadata2))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
quant_files2 <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v4/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
# txi import quant files by genes from salmon into DESEQ2
txi2 <- tximport(quant_files,type="salmon", txOut=TRUE)
rmarkdown::render_site()
?results
resultsNames(dds_2)
resultsNames(dds)
rmarkdown::render_site()
resultsNames(dds)
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v1/")
quant_files <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v1/",pattern="quant.genes.sf",recursive = TRUE,full.names = TRUE)
# txi import quant files by genes from salmon into DESEQ2
txi <- tximport(quant_files,type="salmon", txOut=TRUE)
metadata = read.table('/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/BRAF_samples.txt', header = TRUE)
fig <- plot_ly(
type = 'table',
header = list(
values = c("<b>Samples</b>", names(metadata)),
align = c('left', rep('center', ncol(metadata))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(235, 100, 230)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(metadata),
t(as.matrix(unname(metadata)))
),
align = c('left', rep('center', ncol(metadata))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
fig
dds <- DESeqDataSetFromTximport(txi,
colData = metadata,
design <- ~Treatment)
counts <- colSums(assay(dds))
counts <- as.data.frame(counts)
rownames(counts) <- metadata$Sample
keep <- rowSums(assay(dds) >= 5) >= 2
dds <- dds[keep,]
boxplot(assay(dds))
resultsNames(dds)
#Import quantification files generated by DRAGEN from SALMON.
dirs <- list.files("/Users/aliciapliego/Projects/FMI_RNAseq/BRAF/data/data_v2/")
rmarkdown::render_site()
dds_2
